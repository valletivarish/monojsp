package com.monocept.controller;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import com.monocept.database.BankApplicationDbUtil;
import com.monocept.model.Transaction;

@WebServlet("/user")
public class UserController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Resource(name = "jdbc/bank_application")
	private DataSource dataSource;

	BankApplicationDbUtil bankApplicationDbUtil;

	@Override
	public void init() throws ServletException {
		this.bankApplicationDbUtil = new BankApplicationDbUtil(dataSource);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		int attribute = Integer.parseInt((String) session.getAttribute("username"));
		String command = request.getParameter("command");
		if (command == null) {
			command = "user";
		}
		try {
			switch (command) {
			case "passbook":
				viewPassbook(request,response,attribute);
				break;
			default:
				request.setAttribute("Username", bankApplicationDbUtil.getUsername(attribute));
				RequestDispatcher requestDispatcher = request.getRequestDispatcher("user-home.jsp");
				requestDispatcher.forward(request, response);
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

	private void viewPassbook(HttpServletRequest request, HttpServletResponse response, int attribute) throws SQLException, ServletException, IOException {
	    List<Transaction> passbook = new ArrayList<>();
	    String parameter = request.getParameter("select");
	    String searchValueParam = request.getParameter("searchValue");
	    
	    try {
	        if (searchValueParam != null && !searchValueParam.isEmpty()) {
	            int searchValue = Integer.parseInt(searchValueParam);
	            if ("senderAccountNumber".equals(parameter)) {
	                passbook = bankApplicationDbUtil.getTransactionBySenderAccountNumber(searchValue);
	            } else if ("receiverAccountNumber".equals(parameter)) {
	                passbook = bankApplicationDbUtil.getTransactionByReceiverAccountNumber(searchValue);
	            }
	        } else {
	        	System.out.println("in else");
	            passbook = bankApplicationDbUtil.getPassbook(attribute);
	        }
	    } catch (NumberFormatException e) {
	        System.out.println("Invalid searchValueParam: " + searchValueParam);
	    } catch (SQLException e) {
	        System.out.println("SQL Exception: " + e.getMessage());
	        e.printStackTrace(); // Print stack trace for detailed error analysis
	    }
	    
	    System.out.println("Passbook Transactions: " + passbook); // Log the retrieved transactions
	    
	    request.setAttribute("TheTransactions", passbook);
	    RequestDispatcher requestDispatcher = request.getRequestDispatcher("user-passbook.jsp");
	    requestDispatcher.forward(request, response);
	}


	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

}
