package com.monocept.database;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import com.monocept.model.Customer;
import com.monocept.model.Transaction;
import com.monocept.model.Account;

public class BankApplicationDbUtil {
	private DataSource dataSource;
	private PreparedStatement prepareStatement;

	public BankApplicationDbUtil(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	public boolean validateUser(String username, String password) throws SQLException {
		if (username == null || !username.matches("\\d+")) {
			return false;
		}
		int customerUserId = Integer.parseInt(username);
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers where customer_id=? and password=?";
		prepareStatement = connection.prepareStatement(selectQuery);
		prepareStatement.setInt(1, customerUserId);
		prepareStatement.setString(2, password);
		ResultSet executeQuery = prepareStatement.executeQuery();
		while (executeQuery.next()) {
			int customerId = executeQuery.getInt("customer_id");
			String passwordDB = executeQuery.getString("password");
			if (customerId == customerUserId && passwordDB.equals(password)) {
				return true;
			}

		}
		return false;

	}

	public void insertCustomer(Customer customer) throws SQLException {
		Connection connection = dataSource.getConnection();
		String insertQuery = "insert into customers(first_name,last_name,email_id,password) values(?,?,?,?)";
		PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
		preparedStatement.setString(1, customer.getFirst_name());
		preparedStatement.setString(2, customer.getLast_name());
		preparedStatement.setString(3, customer.getEmail());
		preparedStatement.setString(4, customer.getPassword());
		int executeUpdate = preparedStatement.executeUpdate();
		String selectQuery = "select * from customers where first_name=? and last_name=? and email_id=? and password=?";
		PreparedStatement selectPrepareStatement = connection.prepareStatement(selectQuery);
		selectPrepareStatement.setString(1, customer.getFirst_name());
		selectPrepareStatement.setString(2, customer.getLast_name());
		selectPrepareStatement.setString(3, customer.getEmail());
		selectPrepareStatement.setString(4, customer.getPassword());
		ResultSet executeQuery = selectPrepareStatement.executeQuery();
		int customer_id = 0;
		while (executeQuery.next()) {
			customer_id = executeQuery.getInt("customer_id");
		}
		insertQuery = "insert into accounts(customer_id) values(?)";
		PreparedStatement preparedStatement1 = connection.prepareStatement(insertQuery);
		preparedStatement1.setInt(1, customer_id);
		int executeUpdate2 = preparedStatement1.executeUpdate();

	}

	public Map<Customer, Account> getCustomers() throws SQLException {
		Map<Customer, Account> customers = new HashMap<Customer, Account>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers c join accounts a on c.customer_id=a.customer_id";
		Statement createStatement = connection.createStatement();
		ResultSet executeQuery = createStatement.executeQuery(selectQuery);
		while (executeQuery.next()) {
			String fname = executeQuery.getString("first_name");
			String lname = executeQuery.getString("last_name");
			int account_no = executeQuery.getInt("account_number");
			double balance = executeQuery.getDouble("balance");
			customers.put(new Customer(fname, lname), new Account(account_no, balance));

		}
		return customers;

	}

	public List<Transaction> getTransactions() throws SQLException {
		List<Transaction> transactions = new ArrayList<Transaction>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from transactions";
		Statement createStatement = connection.createStatement();
		ResultSet executeQuery = createStatement.executeQuery(selectQuery);
		while (executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String date = executeQuery.getString("date_of_transaction");
			String type = executeQuery.getString("transaction_type");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);

		}
		return transactions;
	}

	public Map<Customer, Account> getCustomersByAccountNumber(int searchValue) throws SQLException {
		Map<Customer, Account> customers = new HashMap<Customer, Account>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers c join accounts a on c.customer_id=a.customer_id where a.account_number=?";
		PreparedStatement prepareStatement = connection.prepareStatement(selectQuery);
		prepareStatement.setInt(1, searchValue);
		ResultSet executeQuery = prepareStatement.executeQuery();
		while (executeQuery.next()) {
			String fname = executeQuery.getString("first_name");
			String lname = executeQuery.getString("last_name");
			int account_no = executeQuery.getInt("account_number");
			double balance = executeQuery.getDouble("balance");
			customers.put(new Customer(fname, lname), new Account(account_no, balance));

		}
		return customers;
	}

	public Map<Customer, Account> getCustomersByName(String parameter) throws SQLException {
		Map<Customer, Account> customers = new HashMap<Customer, Account>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers c join accounts a on c.customer_id=a.customer_id where concat(c.first_name,c.last_name) like ?";
		PreparedStatement prepareStatement = connection.prepareStatement(selectQuery);
		prepareStatement.setString(1, "%" + parameter + "%");
		ResultSet executeQuery = prepareStatement.executeQuery();
		while (executeQuery.next()) {
			String fname = executeQuery.getString("first_name");
			String lname = executeQuery.getString("last_name");
			int account_no = executeQuery.getInt("account_number");
			double balance = executeQuery.getDouble("balance");
			customers.put(new Customer(fname, lname), new Account(account_no, balance));

		}
		return customers;
	}

	public List<Transaction> getTransactionBySenderAccountNumber(int searchValue) throws SQLException {
		List<Transaction> transactions = new ArrayList<Transaction>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from transactions where sender_account_number=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, searchValue);
		ResultSet executeQuery = preparedStatement.executeQuery();
		while (executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String date = executeQuery.getString("date_of_transaction");
			String type = executeQuery.getString("transaction_type");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);
		}
		return transactions;
	}

	public List<Transaction> getTransactionByReceiverAccountNumber(int searchValue) throws SQLException {
		List<Transaction> transactions = new ArrayList<Transaction>();
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from transactions where receiver_account_number=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, searchValue);
		ResultSet executeQuery = preparedStatement.executeQuery();
		while (executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String date = executeQuery.getString("date_of_transaction");
			String type = executeQuery.getString("transaction_type");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);
		}
		return transactions;
	}

	public String getUsername(int attribute) throws SQLException {
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers where customer_id=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, attribute);
		ResultSet executeQuery = preparedStatement.executeQuery();
		String fname = null;
		String lname = null;
		if (executeQuery.next()) {
			fname = executeQuery.getString("first_name");
			lname = executeQuery.getString("last_name");
		}
		return fname + " " + lname;

	}

	public List<Transaction> getPassbook(int attribute) throws SQLException {
		List<Transaction> transactions = new LinkedList<>();
		Connection connection = dataSource.getConnection();
		String accountNumberQuery = "select * from accounts where customer_id=?";
		PreparedStatement prepareStatement2 = connection.prepareStatement(accountNumberQuery);
		prepareStatement2.setInt(1, attribute);
		ResultSet executeQuery2 = prepareStatement2.executeQuery();
		int accountNumber = 0;
		if (executeQuery2.next()) {
			accountNumber = executeQuery2.getInt("account_number");
			System.out.println(accountNumber);
		}
		String selectQuery = "select * from transactions where sender_account_number=? or receiver_account_number=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, accountNumber);
		preparedStatement.setInt(2, accountNumber);
		ResultSet executeQuery = preparedStatement.executeQuery();

		while (executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String type = null;
			if (sender == accountNumber) {
				type = "Debit";
			}
			if (receiver == accountNumber) {
				type = "Credit";
			}

			String date = executeQuery.getString("date_of_transaction");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			System.out.println(transaction);
			transactions.add(transaction);
		}

		return transactions;
	}

	public boolean newTransaction(int customer_id, int receiver_account_number, double amount) throws SQLException {
		Connection conn = null;
		PreparedStatement st1 = null;
		PreparedStatement st2 = null;
		PreparedStatement st3 = null;
		PreparedStatement st4 = null;
		PreparedStatement st5 = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		boolean transactionSuccess = false;

		conn = dataSource.getConnection();
		String query1 = "select account_number, balance from accounts where customer_id = ?";
		st1 = conn.prepareStatement(query1);
		st1.setInt(1, customer_id);
		rs1 = st1.executeQuery();

		if (rs1.next()) {
			int senderAccountNumber = rs1.getInt("account_number");
			double senderBalance = rs1.getDouble("balance");
			if (senderBalance >= amount) {
				String query2 = "select balance from accounts where account_number = ?";
				st2 = conn.prepareStatement(query2);
				st2.setInt(1, receiver_account_number);
				rs2 = st2.executeQuery();

				if (rs2.next()) {
					double receiverBalance = rs2.getDouble("balance");
					String updateReceiverQuery = "update accounts set balance = ? where account_number = ?";
					st3 = conn.prepareStatement(updateReceiverQuery);
					st3.setDouble(1, receiverBalance + amount);
					st3.setInt(2, receiver_account_number);
					st3.executeUpdate();
					String updateSenderQuery = "update accounts set balance = ? where account_number = ?";
					st4 = conn.prepareStatement(updateSenderQuery);
					st4.setDouble(1, senderBalance - amount);
					st4.setInt(2, senderAccountNumber);
					st4.executeUpdate();
					String insertTransactionQuery = "insert into transactions (sender_account_number, receiver_account_number, transaction_type, transaction_amount) values (?, ?, ?, ?)";
					st5 = conn.prepareStatement(insertTransactionQuery);
					st5.setInt(1, senderAccountNumber);
					st5.setInt(2, receiver_account_number);
					st5.setString(3, "Transfer");
					st5.setDouble(4, amount);
					st5.executeUpdate();
					transactionSuccess = true;
				} else {
					throw new SQLException("Receiver account does not exist.");
				}
			} else {
				throw new SQLException("Insufficient balance.");
			}
		}

		return transactionSuccess;
	}

	public int getAccountNumber(int customer_id) throws SQLException {
		Connection connection = dataSource.getConnection();
		String selectQuery = "select account_number from accounts where customer_id=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, customer_id);
		ResultSet executeQuery = preparedStatement.executeQuery();
		int account_number = 0;
		while (executeQuery.next()) {
			account_number = executeQuery.getInt("account_number");
		}
		return account_number;

	}

	public Customer getAccountDetails(int customer_id) throws SQLException {
		Connection connection = dataSource.getConnection();
		String selectQuery = "select * from customers where customer_id=?";
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, customer_id);
		ResultSet executeQuery = preparedStatement.executeQuery();
		Customer customer = null;
		while (executeQuery.next()) {
			String fname = executeQuery.getString("first_name");
			String lname = executeQuery.getString("last_name");
			String email = executeQuery.getString("email_id");
			String password = executeQuery.getString("password");
			customer = new Customer(fname, lname, email, password);
		}
		return customer;
	}

	public void updateDetails(Customer customer) throws SQLException {
		Connection connection = dataSource.getConnection();
		String updateQuery = "update customers set first_name=?,last_name=?,email_id=?,password=? where customer_id=?";
		PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
		preparedStatement.setString(1, customer.getFirst_name());
		preparedStatement.setString(2, customer.getLast_name());
		preparedStatement.setString(3, customer.getEmail());
		preparedStatement.setString(4, customer.getPassword());
		preparedStatement.setInt(5, customer.getCustomer_id());
		int executeUpdate = preparedStatement.executeUpdate();

		System.out.println("Update rows:" + executeUpdate);
	}

	public List<Transaction> getPassbookBySenderAccountNumber(int searchValue) throws SQLException {
		List<Transaction> transactions=new LinkedList<Transaction>();
		String selectQuery = "select * from accounts a join customers c on a.customer_id=c.customer_id join transactions t on t.sender_account_number=a.account_number or t.receiver_account_number=a.account_number where a.account_number=?;";
		Connection connection = dataSource.getConnection();
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, searchValue);
		ResultSet executeQuery = preparedStatement.executeQuery();
		while(executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String date = executeQuery.getString("date_of_transaction");
			String type = executeQuery.getString("transaction_type");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);	
		}
			
		return transactions;
	}

	public List<Transaction> getPassbookByReceiverAccountNumber(int searchValue) throws SQLException {
		List<Transaction> transactions=new LinkedList<Transaction>();
		String selectQuery = "select * from accounts a join customers c on a.customer_id=c.customer_id join transactions t on t.sender_account_number=a.account_number or t.receiver_account_number=a.account_number where a.account_number=?;";
		Connection connection = dataSource.getConnection();
		PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
		preparedStatement.setInt(1, searchValue);
		ResultSet executeQuery = preparedStatement.executeQuery();
		while(executeQuery.next()) {
			int sender = executeQuery.getInt("sender_account_number");
			int receiver = executeQuery.getInt("receiver_account_number");
			String date = executeQuery.getString("date_of_transaction");
			String type = executeQuery.getString("transaction_type");
			double amount = executeQuery.getDouble("transaction_amount");
			Transaction transaction = new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);	
		}
			
		return transactions;
	}

}
