package com.monocept.controller;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import com.monocept.database.BankApplicationDbUtil;
import com.monocept.model.Transaction;

@WebServlet("/user")
public class UserController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Resource(name = "jdbc/bank_application")
	private DataSource dataSource;

	BankApplicationDbUtil bankApplicationDbUtil;

	@Override
	public void init() throws ServletException {
		this.bankApplicationDbUtil = new BankApplicationDbUtil(dataSource);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		int attribute = Integer.parseInt((String) session.getAttribute("username"));
		String command = request.getParameter("command");
		if (command == null) {
			command = "user";
		}
		try {
			switch (command) {
			case "passbook":
				viewPassbook(request,response,attribute);
				break;
			case "newTransaction":
				newTransaction(request,response);
				break;
			case "insertTransaction":
				insertTransaction(request,response);
				break;
			default:
				request.setAttribute("Username", bankApplicationDbUtil.getUsername(attribute));
				RequestDispatcher requestDispatcher = request.getRequestDispatcher("user-home.jsp");
				requestDispatcher.forward(request, response);
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

	private void insertTransaction(HttpServletRequest request, HttpServletResponse response) throws SQLException, ServletException, IOException {
		HttpSession session = request.getSession();
		int sender_account_number=(int) session.getAttribute("username");
		int receiver_account_number=Integer.parseInt(request.getParameter("raccount"));
		double amount=Integer.parseInt(request.getParameter("amount"));
		boolean transactionImplementation = bankApplicationDbUtil.transactionImplementation(new Transaction(sender_account_number,receiver_account_number,"transfer",amount));
		if(transactionImplementation) {
			System.out.println("updated");
		}
		else {
			System.out.println("not updated");
		}
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("user");
		requestDispatcher.forward(request, response);
		
	}

	private void newTransaction(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		RequestDispatcher requestDispatcher = request.getRequestDispatcher("new-transaction.jsp");
		requestDispatcher.forward(request, response);
	}

	private void viewPassbook(HttpServletRequest request, HttpServletResponse response, int attribute) throws SQLException, ServletException, IOException {
		List<Transaction> passbook = new ArrayList<Transaction>();
		String parameter = request.getParameter("select");
		String searchValueParam = request.getParameter("searchValue");
		if (searchValueParam != null && !searchValueParam.isEmpty()) {
			int searchValue = Integer.parseInt(searchValueParam);
			if ("senderAccountNumber".equals(parameter)) {
				passbook = bankApplicationDbUtil.getTransactionBySenderAccountNumber(searchValue);
			} else if ("receiverAccountNumber".equals(parameter)) {
				passbook = bankApplicationDbUtil.getTransactionByReceiverAccountNumber(searchValue);
			}
		} else {
			System.out.println(attribute);
			passbook=bankApplicationDbUtil.getPassbook(attribute);
		}
		System.out.println(passbook);
		request.setAttribute("TheTransactions", passbook);

		
		
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

}
